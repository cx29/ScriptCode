import os
from collections import defaultdict
import matplotlib.pyplot as plt
import pandas as pd
from typing import List, Dict


def collect_csv_files(base_path: str, keywords: List[str]) -> Dict[str, Dict[str, Dict[str, List[str]]]]:
    result = {}
    for name in os.listdir(base_path):
        sub_dir = os.path.join(base_path, name)
        if not os.path.isdir(sub_dir):
            continue
        csv_files = [
            f
            for f in os.listdir(sub_dir)
            if f.lower().endswith('.csv')
        ]
        if not csv_files:
            continue

        csv_files.sort(key=lambda f: os.path.getmtime(os.path.join(sub_dir, f)))

        outer_dic = defaultdict(lambda: defaultdict(list))
        for f in csv_files:
            prefix = f.split('_', 1)[0]
            low_f = f.lower()
            sub_key = next((kw
                            for kw in keywords
                            if kw.lower() in low_f
                            ), 'others')
            outer_dic[prefix][sub_key].append(os.path.join(sub_dir, f))

        result[name] = {k: dict(v) for k, v in outer_dic.items()}

    return result


def extract_last_value(data_map: dict, column: int):
    data_by_file_type = defaultdict(list)
    tasks = []

    def read_one(f, file_type):
        try:
            df = pd.read_csv(f)
            if column >= df.shape[1]:
                print("cannot find column {}".format(column))
                return None
            value = df.iloc[-1, column]  # 取最后一行的值
            filename = os.path.splitext(os.path.basename(f))[0]
            return (file_type, filename, value)
        except Exception as e:
            print(f"read file {f} error:{e}")
            return None

    for _, type_map in data_map.items():
        for _, file_type_map in type_map.items():
            for file_type, file_list in file_type_map.items():
                for f in file_list:
                    tasks.append((f, file_type))

   


def plot_results(values_maps: dict, prefix_maps: dict, column: str, save_dir: str):
    os.makedirs(save_dir, exist_ok=True)
    plt.figure(figsize=(10, 6))

    for i, (key, values) in enumerate(values_maps.items()):
        x_vals = [key] * len(values)
        y_vals = values
        plt.scatter(x_vals, y_vals, label=key)
        for x, y, prefix in zip(x_vals, y_vals, prefix_maps[key]):
            plt.text(
                x + (i * 0.5),
                y + .01 * max(y_vals),
                s=prefix,
                rotation=45,
                fontsize=8,
                ha='left',
                va='bottom')

    plt.title(f"Scatter plot of {column}")
    plt.xlabel("Group")
    plt.ylabel(column)
    plt.legend()
    scatter_file = os.path.join(save_dir, f"scatter_{column}.png")
    plt.savefig(scatter_file, dpi=300, bbox_inches='tight')
    print(f"saved scatter plot {scatter_file}")

    plt.figure(figsize=(8, 5))
    plt.boxplot(values_maps.values(), labels=values_maps.keys())
    plt.title(f"Boxplot of {column}")
    plt.xlabel("Group")
    plt.ylabel(column)
    box_file = os.path.join(save_dir, f"box_{column}.png")
    plt.savefig(box_file, dpi=300, bbox_inches='tight')
    print(f"saved box plot {box_file}")


# 按装订区域中的绿色按钮以运行脚本。
if __name__ == '__main__':
    base_path = input('Enter base path: ').strip()
    keywords = [
        "_Y_XpostSOA_2V_", "_X_XpostSOA_2V", "_Z_XpostSOA_2V",
        "_Y_YpostSOA_2V_", "_X_YpostSOA_2V", "_Z_YpostSOA_2V",
        "_Y_Xpost_", "_X_Xpost", "_Z_Xpost",
        "_Y_Ypost_", "_X_Ypost", "_Z_Ypost",
        "_YClimb_Xpost", "_YClimb_Input", "_YClimb_Ypost",
        "_Y_Input_SP", "_X_Input_SP", "_Z_Input_SP",
        "_Y_Input", "_X_Input", "_Z_Input",
    ]
    if os.path.isdir(base_path):
        csv_dic = collect_csv_files(base_path, keywords)
        col = input('Enter column name: ').strip()
        group_by = input('Enter group by[folder/type] : ').strip().lower()
        if group_by not in ('folder', 'type'):
            print('Invalid group, use folder')
            group_by = 'folder'
        values_map = extract_last_value(csv_dic, int(col))
        if values_map:
            plot_results(values_map, col, base_path)
        else:
            print('No results found')
    else:
        print('Invalid path')
